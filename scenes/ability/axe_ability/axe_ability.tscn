[gd_scene load_steps=10 format=3 uid="uid://pp5k37bvcqw4"]

[ext_resource type="Script" uid="uid://cjooba6ugxh1y" path="res://scenes/ability/axe_ability/axe_ability.gd" id="1_65u81"]
[ext_resource type="Script" uid="uid://cbhhc6cxjbhpx" path="res://scenes/component/hitbox_component.gd" id="3_m8265"]
[ext_resource type="Texture2D" uid="uid://dhrj7ka6gylqy" path="res://scenes/ability/axe_ability/spwpn_wrath_of_trog.png" id="3_r58rl"]

[sub_resource type="Animation" id="Animation_r58rl"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [-0.7853982]
}

[sub_resource type="Animation" id="Animation_m8265"]
resource_name = "default"
length = 0.75
loop_mode = 1
step = 0.05
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.75),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [-0.7853982, 5.497787143782138]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_twdap"]
_data = {
&"RESET": SubResource("Animation_r58rl"),
&"default": SubResource("Animation_m8265")
}

[sub_resource type="Shader" id="Shader_qiub7"]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 color : source_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false
uniform vec2 number_of_images = vec2(1.0); // number of horizontal and vertical images in the sprite sheet


void vertex() {
	if (add_margins) {
		VERTEX += sign(VERTEX) * width; // replace sign(VERTEX) by (sign(VERTEX) * 2.0 - 1.0) if not Centered
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, vec2 image_top_left, vec2 image_bottom_right, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, image_top_left, image_bottom_right) || texture(texture, xy).a <= 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	vec2 image_top_left = floor(uv * number_of_images) / number_of_images;
	vec2 image_bottom_right = image_top_left + vec2(1.0) / number_of_images;

	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0) * number_of_images);
		
		uv = (uv - texture_pixel_size * width - image_top_left) * TEXTURE_PIXEL_SIZE / texture_pixel_size + image_top_left;
		
		if (uv != clamp(uv, image_top_left, image_bottom_right)) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, image_top_left, image_bottom_right, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_m8265"]
resource_local_to_scene = true
shader = SubResource("Shader_qiub7")
shader_parameter/color = Color(0.45882353, 0.8901961, 1, 1)
shader_parameter/width = 1.0000000475
shader_parameter/pattern = 0
shader_parameter/inside = false
shader_parameter/add_margins = true
shader_parameter/number_of_images = Vector2(1, 1)

[sub_resource type="CircleShape2D" id="CircleShape2D_r58rl"]

[node name="AxeAbility" type="Node2D"]
scale = Vector2(1.3, 1.3)
script = ExtResource("1_65u81")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
&"": SubResource("AnimationLibrary_twdap")
}
autoplay = "default"

[node name="Sprite2D" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_m8265")
rotation = -0.7853982
scale = Vector2(0.5, 0.5)
texture = ExtResource("3_r58rl")

[node name="HitboxComponent" type="Area2D" parent="."]
collision_layer = 4
collision_mask = 0
script = ExtResource("3_m8265")
metadata/_custom_type_script = "uid://cbhhc6cxjbhpx"

[node name="CollisionShape2D" type="CollisionShape2D" parent="HitboxComponent"]
visible = false
shape = SubResource("CircleShape2D_r58rl")
